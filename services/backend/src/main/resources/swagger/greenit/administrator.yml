openapi: "3.0.3"
info:
  title: Swagger GreenIT - Open API 3.0 - Administrator
  description: This is a Inventory Server based on the OpenAPI 3.0 specification.
  version: '1.0.0'

tags:
  - name: administrator
    description: Endpoint for subscriber administration

paths:
  /administrator/organizations:
    get:
      tags:
        - administrator
      summary: Get organizations information
      operationId: getOrganizations
      responses:
        '200':
          description: Return organizations information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SubscriberRest"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update criteria for an organizations
      operationId: updateOrganization
      parameters:
        - $ref: '#/components/parameters/reqOrganizationIdQueryParam'
      requestBody:
        description: Mandatory criteria details to update.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CriteriaRest"
      tags:
        - administrator
      responses:
        '200':
          description: Criteria have been updated for subscriber
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriberRest"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: "#/components/responses/InternalServerError"

  /administrator/workspaces:
    get:
      tags:
        - administrator
      summary: Get workspaces information
      operationId: getWorkspaces
      parameters:
        - $ref: '#/components/parameters/workspaceIdQueryParam'
        - $ref: '#/components/parameters/organizationIdQueryParam'
      responses:
        '200':
          description: Return Workspaces information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SubscriberRest"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      summary: Update a workspace
      operationId: updateWorkspace
      parameters:
        - $ref: '#/components/parameters/workspaceIdQueryParam'
      requestBody:
        description: Mandatory workspace details to update.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationUpsertRest"
      tags:
        - administrator
      responses:
        '200':
          description: Workspace has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationRest"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new workspace
      operationId: createWorkspaceAsAdmin
      requestBody:
        description: Mandatory workspace details to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationUpsertRest"
      tags:
        - administrator
      responses:
        '201':
          description: Workspaces has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationRest"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Workspace already exists.
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/RestError"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /administrator/workspaces/users:
    get:
      tags:
        - administrator
      summary: Get users related to the workspace
      operationId: getUsersOfWorkspace
      parameters:
        - $ref: '#/components/parameters/reqWorkspaceIdQueryParam'
      responses:
        '200':
          description: Return users linked to the Workspace.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserInfoRest"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Link a user to a workspace and add roles
      operationId: linkUserToWorkspace
      requestBody:
        description: Mandatory user and role details to link.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LinkUserRoleRest"
      tags:
        - administrator
      responses:
        '204':
          description: User has been linked to the workspace.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserInfoRest"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: User is  already linked to the workspace.
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/RestError"
        '500':
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: Edit multiple users' rights
      operationId: updateRoleAccess
      requestBody:
        description: Mandatory user and role details to update.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LinkUserRoleRest"
      tags:
        - administrator
      responses:
        '204':
          description: Rights has been updated.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserInfoRest"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete user-workspace link
      operationId: deleteUserWorkspaceLink
      requestBody:
        description: Mandatory user and workspace details to unlink.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LinkUserRoleRest"
      tags:
        - administrator
      responses:
        '204':
          description: link between user and workspace has been deleted.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: "#/components/responses/InternalServerError"

  /administrator/organizations/users:
    get:
      tags:
        - administrator
      summary: search and display the users( filtered by related_domains of organization)
      operationId: searchUserByName
      parameters:
        - $ref: '#/components/parameters/nameSearchQueryParam'
        - $ref: '#/components/parameters/reqOrganizationIdQueryParam'
        - $ref: '#/components/parameters/workspaceIdQueryParam'
      responses:
        '200':
          description: Return Workspaces information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserSearchRest"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /administrator/roles:
    get:
      tags:
        - administrator
      summary: Get all the roles
      operationId: getRoles
      responses:
        '200':
          description: Return all the roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RolesRest"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /administrator/organization:
    get:
      tags:
        - administrator
      summary: Get organization by id
      operationId: getOrganizationById
      parameters:
        - $ref: '#/components/parameters/reqOrganizationIdQueryParam'
      responses:
        '200':
          description: Return organization
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/SubscriberRest"
        '500':
          $ref: "#/components/responses/InternalServerError"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

